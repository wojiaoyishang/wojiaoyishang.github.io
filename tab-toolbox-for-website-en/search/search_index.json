{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Tab Toolbox for Website's Development Document Language: Chinese | English About Tab Toolbox for Website Tab Toolbox for Website started out as a small program named Tab Toolbox on the Windows platform, which designed by Xinkai, and Yishang joined later. The purpose of the Tab Toolbox is to solve the inconvenience for users when using the computer. Tab Toolbox for Website was rebuilt in Python for this purpose. Adopt B/S structure, support one device to install multiple devices. Tab Toolbox for Website is a useful tools in System which has flexible plugin function. It is in line with high school information technology and anyone can use Python to add functions freely. Most of the built-in plug-ins are provided by Yishang and Xinkai. Subsequent Tab Toolbox for Website will exude more vitality! About Deveopment Document This Document provide two languages: English and Chinese(\u4e2d\u6587). All written by Yishang. Thanks for mkdocs provide the way to bulid this document! Quickstart Let's start at running Tab Toolbox for Website ! Please reading quickstart !","title":"Home"},{"location":"#welcome-to-tab-toolbox-for-websites-development-document","text":"Language: Chinese | English","title":"Welcome to Tab Toolbox for Website's Development Document"},{"location":"#about-tab-toolbox-for-website","text":"Tab Toolbox for Website started out as a small program named Tab Toolbox on the Windows platform, which designed by Xinkai, and Yishang joined later. The purpose of the Tab Toolbox is to solve the inconvenience for users when using the computer. Tab Toolbox for Website was rebuilt in Python for this purpose. Adopt B/S structure, support one device to install multiple devices. Tab Toolbox for Website is a useful tools in System which has flexible plugin function. It is in line with high school information technology and anyone can use Python to add functions freely. Most of the built-in plug-ins are provided by Yishang and Xinkai. Subsequent Tab Toolbox for Website will exude more vitality!","title":"About Tab Toolbox for Website"},{"location":"#about-deveopment-document","text":"This Document provide two languages: English and Chinese(\u4e2d\u6587). All written by Yishang. Thanks for mkdocs provide the way to bulid this document!","title":"About Deveopment Document"},{"location":"#quickstart","text":"Let's start at running Tab Toolbox for Website ! Please reading quickstart !","title":"Quickstart"},{"location":"appdev/","text":"SDK & Module About Appdev In the appdev folder of the root directory of Tab Toolbox for Website, various functions packaged by developers are stored, and the modules are also called when the program is running. The following content will introduce the function of each function in. The folder appdev contains 6 files: __init__.py, application.py, console.py, plugin.py, setting.py, ui.py. __init__.py is a script used to make the appdev folder have an initialization script with nothing in it. To start developing, you must first import modules and libraries. For example, if I want to import the application.py module, you can write: from appdev import application or import appdev.application as application Module application The application integrates some operations on programs, logs, and other functions. The principle is: when the program starts, a daemon process will be created first, this daemon process will officially start a main program of Tab Toolbox for Website, and wait for its operation to end. exit() will directly end the daemon process. exit() Used to exit programs. reload() Used to reload programs. The principle is: when the program starts, a daemon process will be created first, this daemon process will officially start a main program of Tab Toolbox for Website, and wait for its operation to end. The reload() function will directly terminate its own process. At this time, the daemon process still exists, and a new main program of Tab Toolbox for Website will be opened again. log_write(time_: int, level: int, msg: str) -> list time_: time (timestamp, nanoseconds) level: level msg: content Write a log. Called by the console output of the console module, generally do not directly call this function to write logs. log_get_latest(limit:int) -> str limit: number of entries Return value: list (list), in order from new to old. [[timestamp(ns), loglevel, info]] Get the latest specified number of logs. log_get_by_timestamp(star: int, end:int) -> str start: start timestamp end: end timestamp Return value: list (list), in order from new to old. [[timestamp(ns), loglevel, info]] Timestamp to get log. log_level2name(n: int) -> str n: level Return value: The name corresponding to the level. The log level gets the corresponding name. get_public_path() -> list Return value: List of public links. Note: If you set an administrator password in Tab Toolbox for Website, but still want non-administrators to access some pages, you need to get the list of public links and add the public links. Adding links is allowing regular expressions. get_public_url().append(\"/test\") # Add /test link to allow non-admin users to access get_public_url().remove(\"/test\") # Remove /test link to allow non-admin users to access get_public_url().append(\"/q\") # Add /q link to allow access by non-admin users get_public_url().remove(\"/q/.*\") # Add links using regular expressions Module console.py console integrates various styles of output to the console and automatically writes logs. plain(*args, sep=' ') sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output plain level logs. log(*args, sep=' ') sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output log level logs. info(*args, sep=' ') sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output info level logs. debug(*args, sep=' ') sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output debug level logs. success(*args, sep=' ') sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output a log of success level. warn(*args, sep=' ') sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Historical legacy function, equivalent to warning() function warning(*args, sep=' ') sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output a log of warning level. error(*args, sep=' ') sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output error level log. Module plugin.py A module for providing actions for plugins. plugin_load() Load the plug-in, which is called at the beginning of the program and is generally not used. get_enable() -> list Return value: a list containing enabled plugins Get the plugins enabled in the database and return the plugins enabled in the database. If you want to see the number of plugins loaded by the program, please use len(plugin.plugins_pointer) to count. (Note: each item in the list here is the name of each plugin folder in the plugins folder) get_exist() -> list Return value: list of plugins Get a valid plugin in the plugin folder. (Note: each item in the list here is the name of each plugin folder in the plugins folder) disable(plugin: str) -> bool plugin: the plugin you want, e.g Hello World Return value: is enabled and successfully deleted the enabled setting in the database returns True, and vice versa Disable plugins. (note: each item in the list here is the name of each plugin folder in the plugins folder) enable(plugin: str) -> bool plugin: the plugin you want, e.g Hello World Return value: exists, is not enabled, and successfully sets the enabled setting in the database returns True, and vice versa to enable plugins. (note: each item in the list here is the name of each plugin folder in the plugins folder) Module setting.py Used to change system settings. get_setting_data() -> dict Get all setting information of the system in the database. get_account_data() -> dict Get all settings information for a user account in the database. get(key: str, table='system_setting') -> any key: The system sets the key value, one is found by default, it is impossible to appear more than one table: corresponding table, system_setting -- system setting website_setting -- website setting Return value: system setting data may be str int list dict Get settings. set(key: str, value: any, table='system_setting') -> any key: The system sets the key value, if not, it will be created. value: value can be int str list dict table: corresponding table, system_setting -- system setting website_setting -- website setting Set the item. Module ui.py The operation of the foreground frame. menu_register(path: str, icon=\"\", href=\"\", target=\"_self\") -> bool path: the path of the menu, separated by \"/\", Top Menu Creation Method: Top Menu Side menu creation method: top menu / side menu Submenu creation method: top menu/side menu/sister menu icon: menu icon, see Font Awesome Icons(https://fontawesome.com/), svg is allowed, the recommended size is 13~18px href: The menu points to the link target: the menu opening position, the default is _self for embedded loading. Registration menu. ui.menu_register(\"Hello World\") ui.menu_register(\"Hello World/\u5b9e\u4f8b\", \"fa-solid fa-code\", \"/helloworld\") menu_get(path: str) -> dict path: the path of the menu, separated by \"/\" Return value: dictionary, menu data title icon href target Get the menu dictionary, returns an empty dictionary if it does not exist. get_init_api() -> dict Get the initialization api, the init API of the front-end framework is generally not used. get_website_setting() -> dict Get parameters for theme template rendering. The value in the website_setting table in the database, obtained at startup. set_quickstart_icon(symbol: str, title: str, icon: str, href: str, mode=0) symbol: the symbol used for identification title: button title icon: button icon, supports svg icon href: button to open the link mode: open mode 0--frame tab open 1--frame tab this page switch Add a library shortcut function button, which is the shortcut entry on the home page (the home page defaults to the first 8) ui.set_quickstart_icon(\"helloworld\", \"\u4f60\u597d\u4e16\u754c\", \"fa-solid fa-earth-africa\", \"/helloworld\", 0) set_notice(symbol: str, title: str, content: str, time_: str = None) symbol: announcement logo title: Announcement title content: announcement content (html) time_: announcement time (default current time xxxx-xx-xx xx:xx) Add or change announcements. ui.set_notice(\"helloworld\", \"\u6765\u81ea Hello World \u63d2\u4ef6\u7684\u516c\u544a\", \"<p>\u8fd9\u4e2a\u662f\u4e00\u6761\u6765\u81ea Hello World \u6d4b\u8bd5\u516c\u544a\uff0c\u60a8\u53ef\u4ee5\u5728 Python \u4e2d from appdev import ui</p>\\n\" \"<p>\u518d\u4f7f\u7528 set_notice(symbol, title, content, [time_]) \u6765\u6dfb\u52a0\uff01</p>\") set_dashboard_div(symbol: str, html: str) symbol: identification html: html code Put cards on the dashboard page. ui.set_dashboard_div(\"helloworld1\", \"\"\" <div class=\"layui-col-md6\"> <div class=\"layui-card\"> <div class=\"layui-card-header\"><i class=\"fa-solid fa-flask-vial icon icon-blue\"></i>helloworld\u63d2\u4ef6\u6d4b\u8bd5</div> <div class=\"layui-card-body\"> \u8fd9\u4e2a\u662f\u4e00\u6761\u6765\u81ea Hello World \u6d4b\u8bd5\u5361\u7247\uff0c\u60a8\u53ef\u4ee5\u5728 Python \u4e2d from appdev import ui <br> \u7136\u540e\u4f7f\u7528 ui.set_dashboard_div(symbol, html) \u6765\u6dfb\u52a0\u8fd9\u4e00\u4e2a\u5361\u7247\u3002 </div> </div> </div>\"\"\")","title":"SDK & Module"},{"location":"appdev/#sdk-module","text":"","title":"SDK &amp; Module"},{"location":"appdev/#about-appdev","text":"In the appdev folder of the root directory of Tab Toolbox for Website, various functions packaged by developers are stored, and the modules are also called when the program is running. The following content will introduce the function of each function in. The folder appdev contains 6 files: __init__.py, application.py, console.py, plugin.py, setting.py, ui.py. __init__.py is a script used to make the appdev folder have an initialization script with nothing in it. To start developing, you must first import modules and libraries. For example, if I want to import the application.py module, you can write: from appdev import application or import appdev.application as application","title":"About Appdev"},{"location":"appdev/#module-application","text":"The application integrates some operations on programs, logs, and other functions. The principle is: when the program starts, a daemon process will be created first, this daemon process will officially start a main program of Tab Toolbox for Website, and wait for its operation to end. exit() will directly end the daemon process.","title":"Module application"},{"location":"appdev/#exit","text":"Used to exit programs.","title":"exit()"},{"location":"appdev/#reload","text":"Used to reload programs. The principle is: when the program starts, a daemon process will be created first, this daemon process will officially start a main program of Tab Toolbox for Website, and wait for its operation to end. The reload() function will directly terminate its own process. At this time, the daemon process still exists, and a new main program of Tab Toolbox for Website will be opened again.","title":"reload()"},{"location":"appdev/#log_writetime_-int-level-int-msg-str-list","text":"time_: time (timestamp, nanoseconds) level: level msg: content Write a log. Called by the console output of the console module, generally do not directly call this function to write logs.","title":"log_write(time_: int, level: int, msg: str) -&gt; list"},{"location":"appdev/#log_get_latestlimitint-str","text":"limit: number of entries Return value: list (list), in order from new to old. [[timestamp(ns), loglevel, info]] Get the latest specified number of logs.","title":"log_get_latest(limit:int) -&gt; str"},{"location":"appdev/#log_get_by_timestampstar-int-endint-str","text":"start: start timestamp end: end timestamp Return value: list (list), in order from new to old. [[timestamp(ns), loglevel, info]] Timestamp to get log.","title":"log_get_by_timestamp(star: int, end:int) -&gt; str"},{"location":"appdev/#log_level2namen-int-str","text":"n: level Return value: The name corresponding to the level. The log level gets the corresponding name.","title":"log_level2name(n: int) -&gt; str"},{"location":"appdev/#get_public_path-list","text":"Return value: List of public links. Note: If you set an administrator password in Tab Toolbox for Website, but still want non-administrators to access some pages, you need to get the list of public links and add the public links. Adding links is allowing regular expressions. get_public_url().append(\"/test\") # Add /test link to allow non-admin users to access get_public_url().remove(\"/test\") # Remove /test link to allow non-admin users to access get_public_url().append(\"/q\") # Add /q link to allow access by non-admin users get_public_url().remove(\"/q/.*\") # Add links using regular expressions","title":"get_public_path() -&gt; list"},{"location":"appdev/#module-consolepy","text":"console integrates various styles of output to the console and automatically writes logs.","title":"Module console.py"},{"location":"appdev/#plainargs-sep","text":"sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output plain level logs.","title":"plain(*args, sep=' ')"},{"location":"appdev/#logargs-sep","text":"sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output log level logs.","title":"log(*args, sep=' ')"},{"location":"appdev/#infoargs-sep","text":"sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output info level logs.","title":"info(*args, sep=' ')"},{"location":"appdev/#debugargs-sep","text":"sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output debug level logs.","title":"debug(*args, sep=' ')"},{"location":"appdev/#successargs-sep","text":"sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output a log of success level.","title":"success(*args, sep=' ')"},{"location":"appdev/#warnargs-sep","text":"sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Historical legacy function, equivalent to warning() function","title":"warn(*args, sep=' ')"},{"location":"appdev/#warningargs-sep","text":"sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output a log of warning level.","title":"warning(*args, sep=' ')"},{"location":"appdev/#errorargs-sep","text":"sep: The connection character between each string. (For details, please refer to Python's built-in print() function) Output error level log.","title":"error(*args, sep=' ')"},{"location":"appdev/#module-pluginpy","text":"A module for providing actions for plugins.","title":"Module plugin.py"},{"location":"appdev/#plugin_load","text":"Load the plug-in, which is called at the beginning of the program and is generally not used.","title":"plugin_load()"},{"location":"appdev/#get_enable-list","text":"Return value: a list containing enabled plugins Get the plugins enabled in the database and return the plugins enabled in the database. If you want to see the number of plugins loaded by the program, please use len(plugin.plugins_pointer) to count. (Note: each item in the list here is the name of each plugin folder in the plugins folder)","title":"get_enable() -&gt; list"},{"location":"appdev/#get_exist-list","text":"Return value: list of plugins Get a valid plugin in the plugin folder. (Note: each item in the list here is the name of each plugin folder in the plugins folder)","title":"get_exist() -&gt; list"},{"location":"appdev/#disableplugin-str-bool","text":"plugin: the plugin you want, e.g Hello World Return value: is enabled and successfully deleted the enabled setting in the database returns True, and vice versa Disable plugins. (note: each item in the list here is the name of each plugin folder in the plugins folder)","title":"disable(plugin: str) -&gt; bool"},{"location":"appdev/#enableplugin-str-bool","text":"plugin: the plugin you want, e.g Hello World Return value: exists, is not enabled, and successfully sets the enabled setting in the database returns True, and vice versa to enable plugins. (note: each item in the list here is the name of each plugin folder in the plugins folder)","title":"enable(plugin: str) -&gt; bool"},{"location":"appdev/#module-settingpy","text":"Used to change system settings.","title":"Module setting.py"},{"location":"appdev/#get_setting_data-dict","text":"Get all setting information of the system in the database.","title":"get_setting_data() -&gt; dict"},{"location":"appdev/#get_account_data-dict","text":"Get all settings information for a user account in the database.","title":"get_account_data() -&gt; dict"},{"location":"appdev/#getkey-str-tablesystem_setting-any","text":"key: The system sets the key value, one is found by default, it is impossible to appear more than one table: corresponding table, system_setting -- system setting website_setting -- website setting Return value: system setting data may be str int list dict Get settings.","title":"get(key: str, table='system_setting') -&gt; any"},{"location":"appdev/#setkey-str-value-any-tablesystem_setting-any","text":"key: The system sets the key value, if not, it will be created. value: value can be int str list dict table: corresponding table, system_setting -- system setting website_setting -- website setting Set the item.","title":"set(key: str, value: any, table='system_setting') -&gt; any"},{"location":"appdev/#module-uipy","text":"The operation of the foreground frame.","title":"Module ui.py"},{"location":"appdev/#menu_registerpath-str-icon-href-target_self-bool","text":"path: the path of the menu, separated by \"/\", Top Menu Creation Method: Top Menu Side menu creation method: top menu / side menu Submenu creation method: top menu/side menu/sister menu icon: menu icon, see Font Awesome Icons(https://fontawesome.com/), svg is allowed, the recommended size is 13~18px href: The menu points to the link target: the menu opening position, the default is _self for embedded loading. Registration menu. ui.menu_register(\"Hello World\") ui.menu_register(\"Hello World/\u5b9e\u4f8b\", \"fa-solid fa-code\", \"/helloworld\")","title":"menu_register(path: str, icon=\"\", href=\"\", target=\"_self\") -&gt; bool"},{"location":"appdev/#menu_getpath-str-dict","text":"path: the path of the menu, separated by \"/\" Return value: dictionary, menu data title icon href target Get the menu dictionary, returns an empty dictionary if it does not exist.","title":"menu_get(path: str) -&gt; dict"},{"location":"appdev/#get_init_api-dict","text":"Get the initialization api, the init API of the front-end framework is generally not used.","title":"get_init_api() -&gt; dict"},{"location":"appdev/#get_website_setting-dict","text":"Get parameters for theme template rendering. The value in the website_setting table in the database, obtained at startup.","title":"get_website_setting() -&gt; dict"},{"location":"appdev/#set_quickstart_iconsymbol-str-title-str-icon-str-href-str-mode0","text":"symbol: the symbol used for identification title: button title icon: button icon, supports svg icon href: button to open the link mode: open mode 0--frame tab open 1--frame tab this page switch Add a library shortcut function button, which is the shortcut entry on the home page (the home page defaults to the first 8) ui.set_quickstart_icon(\"helloworld\", \"\u4f60\u597d\u4e16\u754c\", \"fa-solid fa-earth-africa\", \"/helloworld\", 0)","title":"set_quickstart_icon(symbol: str, title: str, icon: str, href: str, mode=0)"},{"location":"appdev/#set_noticesymbol-str-title-str-content-str-time_-str-none","text":"symbol: announcement logo title: Announcement title content: announcement content (html) time_: announcement time (default current time xxxx-xx-xx xx:xx) Add or change announcements. ui.set_notice(\"helloworld\", \"\u6765\u81ea Hello World \u63d2\u4ef6\u7684\u516c\u544a\", \"<p>\u8fd9\u4e2a\u662f\u4e00\u6761\u6765\u81ea Hello World \u6d4b\u8bd5\u516c\u544a\uff0c\u60a8\u53ef\u4ee5\u5728 Python \u4e2d from appdev import ui</p>\\n\" \"<p>\u518d\u4f7f\u7528 set_notice(symbol, title, content, [time_]) \u6765\u6dfb\u52a0\uff01</p>\")","title":"set_notice(symbol: str, title: str, content: str, time_: str = None)"},{"location":"appdev/#set_dashboard_divsymbol-str-html-str","text":"symbol: identification html: html code Put cards on the dashboard page. ui.set_dashboard_div(\"helloworld1\", \"\"\" <div class=\"layui-col-md6\"> <div class=\"layui-card\"> <div class=\"layui-card-header\"><i class=\"fa-solid fa-flask-vial icon icon-blue\"></i>helloworld\u63d2\u4ef6\u6d4b\u8bd5</div> <div class=\"layui-card-body\"> \u8fd9\u4e2a\u662f\u4e00\u6761\u6765\u81ea Hello World \u6d4b\u8bd5\u5361\u7247\uff0c\u60a8\u53ef\u4ee5\u5728 Python \u4e2d from appdev import ui <br> \u7136\u540e\u4f7f\u7528 ui.set_dashboard_div(symbol, html) \u6765\u6dfb\u52a0\u8fd9\u4e00\u4e2a\u5361\u7247\u3002 </div> </div> </div>\"\"\")","title":"set_dashboard_div(symbol: str, html: str)"},{"location":"directory/","text":"Directory Structure & Instruction Noun description Web framework\uff1aThe layuimini framework used by Tab Toolbox for Website. Basic directory structure Tab Toolbox for Website \u2502 app.py # flask main program start \u2502 config.py # Initial configuration file \u2502 main.py # Start the main program \u2502 reloading.py # for automatic restart \u2502 \u251c\u2500appdev # The built-in basic module for program development \u2502 \u251c\u2500core # Program core module \u2502 \u251c\u2500data # Program data storage \u2502 \u251c\u2500plugins # Program plugin storage \u2502 \u251c\u2500static # Program resource file \u2502 \u2514\u2500templates # Program webpage template Appdev file description appdev \u2502 application.py # About the operation of the program \u2502 console.py # Console (log) output operation \u2502 plugin.py # Plugin management and operation \u2502 setting.py # Program settings and operations (database operations) \u2502 ui.py # Web page control registration and operation \u2514\u2500 __init__.py # Nothing....... Data file description data \u2502 system # System settings \u2514\u2500 log # log record Core file description core \u2502 api_route.py # API request of Web framework \u2514\u2500 page_route.py # page rendering request Template file description templates \u2502 core-about.html # About page \u2502 core-account.html # Account settings page \u2502 core-dashboard.html # Dashboard page \u2502 core-index.html # layuimini web framework \u2502 core-log.html # log page \u2502 core-login.html # Admin password verification page \u2502 core-plugin.html # Plugin management page \u2502 core-quickstart.html # Quick start widget page \u2514\u2500 core-template.html # Template page (inherited in addition to the frame Web framework)","title":"Directory Structure & instruction"},{"location":"directory/#directory-structure-instruction","text":"","title":"Directory Structure &amp; Instruction"},{"location":"directory/#noun-description","text":"Web framework\uff1aThe layuimini framework used by Tab Toolbox for Website.","title":"Noun description"},{"location":"directory/#basic-directory-structure","text":"Tab Toolbox for Website \u2502 app.py # flask main program start \u2502 config.py # Initial configuration file \u2502 main.py # Start the main program \u2502 reloading.py # for automatic restart \u2502 \u251c\u2500appdev # The built-in basic module for program development \u2502 \u251c\u2500core # Program core module \u2502 \u251c\u2500data # Program data storage \u2502 \u251c\u2500plugins # Program plugin storage \u2502 \u251c\u2500static # Program resource file \u2502 \u2514\u2500templates # Program webpage template","title":"Basic directory structure"},{"location":"directory/#appdev-file-description","text":"appdev \u2502 application.py # About the operation of the program \u2502 console.py # Console (log) output operation \u2502 plugin.py # Plugin management and operation \u2502 setting.py # Program settings and operations (database operations) \u2502 ui.py # Web page control registration and operation \u2514\u2500 __init__.py # Nothing.......","title":"Appdev file description"},{"location":"directory/#data-file-description","text":"data \u2502 system # System settings \u2514\u2500 log # log record","title":"Data file description"},{"location":"directory/#core-file-description","text":"core \u2502 api_route.py # API request of Web framework \u2514\u2500 page_route.py # page rendering request","title":"Core file description"},{"location":"directory/#template-file-description","text":"templates \u2502 core-about.html # About page \u2502 core-account.html # Account settings page \u2502 core-dashboard.html # Dashboard page \u2502 core-index.html # layuimini web framework \u2502 core-log.html # log page \u2502 core-login.html # Admin password verification page \u2502 core-plugin.html # Plugin management page \u2502 core-quickstart.html # Quick start widget page \u2514\u2500 core-template.html # Template page (inherited in addition to the frame Web framework)","title":"Template file description"},{"location":"plugin/","text":"Plugin Install & Development Special noun description Plugin (PLUGIN): Not only refers to the available modules, but also refers to the plugin folder name in the plugins directory in Tab Toolbox for Website. This is allowed so that different plugins can use the same name. Plugin name (PLUGIN_NAME): The name of the plugin is different from the plugin in that the plugin name refers to the name of the plugin , not the folder name of the plugin. Plugin Install & Using (1) You need to download your plugin and put it in the plugins directory of Tab Toolbox for Website. (2) Then you need to open the plugin management page in the webpage of Tab Toolbox for Website to enable the plugin. Development: Enable plugin process explained (1) When the user enables the plug-in, the web page will send commands to the server through the API interface. This API interface is written under core/api_core.py. The corresponding plug-in and operation name will be provided on the web page. When the server will disable and enable the operation through the operation name and the corresponding plug-in. (2) If enabled, the plugin will be added to enable_plugins in the system_setting table in the system database file. On the contrary, it deletes the information of the corresponding plug-in. (3) The server will call the reload() function in the application module in the appdev package to restart. For the reload() function you can see the details in the SDK & Module chapter. (4) When restarting, the server will reload the plugin. Development: Plugin Structure Directory Structure For plugins, we artificially prescribe some specific structures, A reasonable plugin must contain two files: DEVELOPEMENT PLUGIN \u2502 __init__.py # Plugin main script \u2514\u2500 plugin.json # The description file of the plugin About plugin.json The content in plugin.json cannot lose the following information: { \"PLUGIN_NAME\": \"Plugin Name\", \"PLUGIN_DESCRIPTION\": \"Plugin Introduction\", \"PLUGIN_VERSION\": \"Plugin Version\", \"PLUGIN_DEVELOPER\": \"Plugin Author\", \"PLUGIN_WEBSITE\": \"Plugin URL\", \"PLUGIN_EMAIL\": \"Plugin Email\", \"PLUGIN_COPYRIGHT\": \"Plugin Copyright\" } You can substitute the value with empty text, but don't lose the key. About __init__.py __init__.py is a script that is called by default when the plugin is enabled. Remember, no infinite loops are allowed in this script, otherwise it will block the toolbox startup. Reference case Hello World plugin Here is an example of the Hello World plugin: Directory Structure: DEVELOPEMENT PLUGIN \u251c\u2500 templates \u2502 \u2514\u2500 hello world.html # The main page file of the plugin \u2502 __init__.py # Plugin main script \u2514\u2500 plugin.json # The description file of the plugin Note: The template file is named in the way of plugin name_template name as far as possible to prevent confusion with templates of other plugins. __init__.py content: import random import appdev.ui as ui from app import app from flask import Blueprint, render_template # \u63d2\u4ef6\u5141\u8bb8\u5b9a\u4e49\u84dd\u56fe\uff0c\u4e0d\u8fc7\u84dd\u56fe\u7684\u7ed1\u5b9a\u9700\u8981\u81ea\u5df1\u6765\uff0c\u89c1\u4ee3\u7801\u6700\u540e\u6ce8\u518c\u84dd\u56fe\u7684\u5730\u65b9 blueprint = Blueprint('helloWorld', __name__, template_folder='templates', static_folder=\"static\", url_prefix=\"/helloworld\") # \u6ce8\u518c\u83dc\u5355 ui.menu_register(\"Hello World\") ui.menu_register(\"Hello World/\u5b9e\u4f8b\", \"fa-solid fa-code\", \"/helloworld\") # \u6ce8\u518c\u5feb\u6377\u6309\u94ae ui.set_quickstart_icon(\"helloworld\", \"\u4f60\u597d\u4e16\u754c\", \"fa-solid fa-earth-africa\", \"/helloworld\", 0) # \u6dfb\u52a0\u4e00\u5219\u516c\u544a ui.set_notice(\"helloworld\", \"\u6765\u81ea Hello World \u63d2\u4ef6\u7684\u516c\u544a\", \"<p>\u8fd9\u4e2a\u662f\u4e00\u6761\u6765\u81ea Hello World \u6d4b\u8bd5\u516c\u544a\uff0c\u60a8\u53ef\u4ee5\u5728 Python \u4e2d from appdev import ui</p>\\n\" \"<p>\u518d\u4f7f\u7528 set_notice(symbol, title, content, [time_]) \u6765\u6dfb\u52a0\uff01</p>\") # \u4eea\u8868\u76d8\u6dfb\u52a0\u5361\u7247 ui.set_dashboard_div(\"helloworld1\", \"\"\" <div class=\"layui-col-md6\"> <div class=\"layui-card\"> <div class=\"layui-card-header\"><i class=\"fa-solid fa-flask-vial icon icon-blue\"></i>helloworld\u63d2\u4ef6\u6d4b\u8bd5</div> <div class=\"layui-card-body\"> \u8fd9\u4e2a\u662f\u4e00\u6761\u6765\u81ea Hello World \u6d4b\u8bd5\u5361\u7247\uff0c\u60a8\u53ef\u4ee5\u5728 Python \u4e2d from appdev import ui <br> \u7136\u540e\u4f7f\u7528 ui.set_dashboard_div(symbol, html) \u6765\u6dfb\u52a0\u8fd9\u4e00\u4e2a\u5361\u7247\u3002 </div> </div> </div>\"\"\") ui.set_dashboard_div(\"helloworld2\", f\"\"\" <div class=\"layui-col-md6\"> <div class=\"layui-card\"> <div class=\"layui-card-header\"><i class=\"fa-solid fa-flask-vial icon icon-blue\"></i>helloworld\u63d2\u4ef6\u6d4b\u8bd5</div> <div class=\"layui-card-body\"> \u4e00\u4e2a\u63d2\u4ef6\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u5361\u7247\uff0c\u800c\u4e14\u53ef\u4ee5\u5b9a\u4e49\u4e0d\u540c\u5185\u5bb9\u3002\u6bd4\u5982\u751f\u6210\u968f\u673a\u6570\uff0c\u4f60\u4eca\u5929\u7684\u5e78\u8fd0\u6570\u5b57\u662f\uff1a{random.randint(10000, 99999)} <br><br><br> </div> </div> </div>\"\"\") @blueprint.route(\"/\") def helloworld(): return render_template(\"questions_index.html\", ) # \u7b49\u5b8c\u5168\u52a0\u8f7d\u8fc7\u4e00\u904d\u4ee3\u7801\u540e\uff0c\u518d\u8c03\u7528app.py\u6587\u4ef6\u4e2d\u7684app\u6ce8\u518c\u84dd\u56fe\u51fd\u6570\u6ce8\u518c\u84dd\u56fe app.register_blueprint(blueprint)","title":"Plugin Install & Development"},{"location":"plugin/#plugin-install-development","text":"","title":"Plugin Install &amp; Development"},{"location":"plugin/#special-noun-description","text":"Plugin (PLUGIN): Not only refers to the available modules, but also refers to the plugin folder name in the plugins directory in Tab Toolbox for Website. This is allowed so that different plugins can use the same name. Plugin name (PLUGIN_NAME): The name of the plugin is different from the plugin in that the plugin name refers to the name of the plugin , not the folder name of the plugin.","title":"Special noun description"},{"location":"plugin/#plugin-install-using","text":"(1) You need to download your plugin and put it in the plugins directory of Tab Toolbox for Website. (2) Then you need to open the plugin management page in the webpage of Tab Toolbox for Website to enable the plugin.","title":"Plugin Install &amp; Using"},{"location":"plugin/#development-enable-plugin-process-explained","text":"(1) When the user enables the plug-in, the web page will send commands to the server through the API interface. This API interface is written under core/api_core.py. The corresponding plug-in and operation name will be provided on the web page. When the server will disable and enable the operation through the operation name and the corresponding plug-in. (2) If enabled, the plugin will be added to enable_plugins in the system_setting table in the system database file. On the contrary, it deletes the information of the corresponding plug-in. (3) The server will call the reload() function in the application module in the appdev package to restart. For the reload() function you can see the details in the SDK & Module chapter. (4) When restarting, the server will reload the plugin.","title":"Development: Enable plugin process explained"},{"location":"plugin/#development-plugin-structure","text":"","title":"Development: Plugin Structure"},{"location":"plugin/#directory-structure","text":"For plugins, we artificially prescribe some specific structures, A reasonable plugin must contain two files: DEVELOPEMENT PLUGIN \u2502 __init__.py # Plugin main script \u2514\u2500 plugin.json # The description file of the plugin","title":"Directory Structure"},{"location":"plugin/#about-pluginjson","text":"The content in plugin.json cannot lose the following information: { \"PLUGIN_NAME\": \"Plugin Name\", \"PLUGIN_DESCRIPTION\": \"Plugin Introduction\", \"PLUGIN_VERSION\": \"Plugin Version\", \"PLUGIN_DEVELOPER\": \"Plugin Author\", \"PLUGIN_WEBSITE\": \"Plugin URL\", \"PLUGIN_EMAIL\": \"Plugin Email\", \"PLUGIN_COPYRIGHT\": \"Plugin Copyright\" } You can substitute the value with empty text, but don't lose the key.","title":"About plugin.json"},{"location":"plugin/#about-__init__py","text":"__init__.py is a script that is called by default when the plugin is enabled. Remember, no infinite loops are allowed in this script, otherwise it will block the toolbox startup.","title":"About __init__.py"},{"location":"plugin/#reference-case-hello-world-plugin","text":"Here is an example of the Hello World plugin: Directory Structure: DEVELOPEMENT PLUGIN \u251c\u2500 templates \u2502 \u2514\u2500 hello world.html # The main page file of the plugin \u2502 __init__.py # Plugin main script \u2514\u2500 plugin.json # The description file of the plugin Note: The template file is named in the way of plugin name_template name as far as possible to prevent confusion with templates of other plugins. __init__.py content: import random import appdev.ui as ui from app import app from flask import Blueprint, render_template # \u63d2\u4ef6\u5141\u8bb8\u5b9a\u4e49\u84dd\u56fe\uff0c\u4e0d\u8fc7\u84dd\u56fe\u7684\u7ed1\u5b9a\u9700\u8981\u81ea\u5df1\u6765\uff0c\u89c1\u4ee3\u7801\u6700\u540e\u6ce8\u518c\u84dd\u56fe\u7684\u5730\u65b9 blueprint = Blueprint('helloWorld', __name__, template_folder='templates', static_folder=\"static\", url_prefix=\"/helloworld\") # \u6ce8\u518c\u83dc\u5355 ui.menu_register(\"Hello World\") ui.menu_register(\"Hello World/\u5b9e\u4f8b\", \"fa-solid fa-code\", \"/helloworld\") # \u6ce8\u518c\u5feb\u6377\u6309\u94ae ui.set_quickstart_icon(\"helloworld\", \"\u4f60\u597d\u4e16\u754c\", \"fa-solid fa-earth-africa\", \"/helloworld\", 0) # \u6dfb\u52a0\u4e00\u5219\u516c\u544a ui.set_notice(\"helloworld\", \"\u6765\u81ea Hello World \u63d2\u4ef6\u7684\u516c\u544a\", \"<p>\u8fd9\u4e2a\u662f\u4e00\u6761\u6765\u81ea Hello World \u6d4b\u8bd5\u516c\u544a\uff0c\u60a8\u53ef\u4ee5\u5728 Python \u4e2d from appdev import ui</p>\\n\" \"<p>\u518d\u4f7f\u7528 set_notice(symbol, title, content, [time_]) \u6765\u6dfb\u52a0\uff01</p>\") # \u4eea\u8868\u76d8\u6dfb\u52a0\u5361\u7247 ui.set_dashboard_div(\"helloworld1\", \"\"\" <div class=\"layui-col-md6\"> <div class=\"layui-card\"> <div class=\"layui-card-header\"><i class=\"fa-solid fa-flask-vial icon icon-blue\"></i>helloworld\u63d2\u4ef6\u6d4b\u8bd5</div> <div class=\"layui-card-body\"> \u8fd9\u4e2a\u662f\u4e00\u6761\u6765\u81ea Hello World \u6d4b\u8bd5\u5361\u7247\uff0c\u60a8\u53ef\u4ee5\u5728 Python \u4e2d from appdev import ui <br> \u7136\u540e\u4f7f\u7528 ui.set_dashboard_div(symbol, html) \u6765\u6dfb\u52a0\u8fd9\u4e00\u4e2a\u5361\u7247\u3002 </div> </div> </div>\"\"\") ui.set_dashboard_div(\"helloworld2\", f\"\"\" <div class=\"layui-col-md6\"> <div class=\"layui-card\"> <div class=\"layui-card-header\"><i class=\"fa-solid fa-flask-vial icon icon-blue\"></i>helloworld\u63d2\u4ef6\u6d4b\u8bd5</div> <div class=\"layui-card-body\"> \u4e00\u4e2a\u63d2\u4ef6\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u5361\u7247\uff0c\u800c\u4e14\u53ef\u4ee5\u5b9a\u4e49\u4e0d\u540c\u5185\u5bb9\u3002\u6bd4\u5982\u751f\u6210\u968f\u673a\u6570\uff0c\u4f60\u4eca\u5929\u7684\u5e78\u8fd0\u6570\u5b57\u662f\uff1a{random.randint(10000, 99999)} <br><br><br> </div> </div> </div>\"\"\") @blueprint.route(\"/\") def helloworld(): return render_template(\"questions_index.html\", ) # \u7b49\u5b8c\u5168\u52a0\u8f7d\u8fc7\u4e00\u904d\u4ee3\u7801\u540e\uff0c\u518d\u8c03\u7528app.py\u6587\u4ef6\u4e2d\u7684app\u6ce8\u518c\u84dd\u56fe\u51fd\u6570\u6ce8\u518c\u84dd\u56fe app.register_blueprint(blueprint)","title":"Reference case Hello World plugin"},{"location":"quickstart/","text":"Getting Started with Tab Toolbox for Website Install Clone the repository All roads lead to Rome, e.g. you can use Git. $ git clone git@github.com:wojiaoyishang/Tab-Toolbox-for-Website.git Install Python Envirnment After clone the repository, you should check Python Envirnment on your computer. This programme based on Python and please note that your Python version must be 3.8.0 and above . version 3.7.X not tested. The Python installation address can be downloaded from the Python official website, the link is here: https://www.python.org/downloads/release/python-380/ Install Python Module After confirming that the Python environment is correct, please confirm whether the modules supported in Python are installed. The modules necessary for Tab Toolbox for Website to run are in requirements.txt in the root directory of the repository. The content is as follows: bs4==0.0.1 Flask==2.1.3 gevent==20.6.2 MarkupSafe==2.1.1 pandas==1.4.3 psutil==5.7.2 requests==2.24.0 lxml==4.5.2 You can use pip to install, like this: $ pip install -r requirements.txt also you can try, $ python -m pip install -r requirements.txt Start directly After you have ensured that Python and its modules are installed correctly, you can run the tests. Start main.py with Python. $ python main.py You can configure Tab Toolbox for Website simply by following the prompts output by the program. The configuration will then be written to config.py in the root directory of Tab Toolbox for Website. and will not ask for configuration again on next direct boot. The configuration guide is only in Chinese, and the following is the corresponding translation... Chinese: * \u563f\uff01\u4f60\u597d\uff01(\uffe3\u25bd\uffe3)\uff0f\u770b\u6765\u8fd9\u662f\u4f60\u7b2c\u4e00\u6b21\u6253\u5f00\u6b64\u7a0b\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u914d\u7f6e\u3002\u5f53\u7136\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u6765\u8fd0\u884c\u6b64\u7a0b\u5e8f\uff0c\u66f4\u591a\u4fe1\u606f\u8bf7\u67e5\u770b\u6211\u4eec\u7684\u6587\u6863\uff01 * \u603b\u4e4b\u6211\u4eec\u5148\u5f00\u59cb\u914d\u7f6e\u5427\uff01 * \u9996\u5148\uff0c\u6b64\u7a0b\u5e8f\u8fd0\u884c\u65f6\u7ed1\u5b9a\u7684IP\u5730\u5740 \u4e3a\uff08\u9ed8\u8ba4\u4e3a 127.0.0.1\uff0c\u4e0d\u7528\u62c5\u5fc3\u8f93\u9519\uff0c\u60a8\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6 config.py \u4e2d\u4fee\u6539\uff09 Enter: * Set HOST to 127.0.0.1 * \u5176\u6b21\uff0c\u8981\u7ed1\u5b9a\u90a3\u4e2a\u7aef\u53e3\u5462\uff1f\uff08\u9ed8\u8ba4\u4e3a 99 \uff09 Enter: * Set POST to 99 * OK\u4e86\uff01\u73b0\u5728\u6211\u4eec\u5c06\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5bf9\u4e8e\u8c03\u8bd5\u6a21\u5f0f\u4e0e\u53d1\u5e03\u6a21\u5f0f\u7684\u8bbe\u5b9a\u8bf7\u81ea\u884c\u4fee\u6539 config.py \u6587\u4ef6\uff01 English: * Hey! Hello! (\uffe3\u25bd\uffe3)\uff0f This is your first time running this software right? We need some configuration. Of course, you can also use the command line to run this program, check out our documentation for more info! * Anyway, let's start configuring it! * First, the IP address that this program is bound to when running is (the default is 127.0.0.1, don't worry about typing it wrong, you can modify it in the configuration file config.py) Enter: * Set HOST to 127.0.0.1 * Second, what port to bind to? (default is 99 ) Enter: * Set POST to 99 * OK! Now we will run the program, please modify the config.py file for the settings of debug mode and release mode! Start commandly In addition, we also provide a way to start from the command line, pass in -h to view help. python main.py -h Usage: main.py [options] Options: -h, --help show this help message and exit -H host, --host=host Host for Running -p port, --port=port Port for Running -D, --development Development Mode -d, --debug Debug Mode The following is an example of startup: (1) Bind 0.0.0.0:8080, you can use Note: Please do not arbitrarily bind IP to 0.0.0.0, which may lead to the risk of public network access. $ python main.py -H 0.0.0.0 -p 8080 or you can, $ python main.py --host=0.0.0.0 --port=8080 (2) Turn on Development mode and Debug mode Note: For developer mode and Debug mode, IP address and port parameters must exist. $ python main.py --host=0.0.0.0 --port=8080 -D -d or $ python main.py --host=0.0.0.0 --port=8080 --development --debug It should be noted that the configuration file will be automatically rewritten when you start using the command line , even if you use the direct startup method next time, the configuration at the last command line startup will be directly used. About the configuration file, it will be explained below. Visit site Access the site according to the bound IP and port, if everything is normal, the following page will be displayed: About configuration file The content of the configuration file config.py is as follows: # Note that this file is only used to configure some built-in content of the program, such as operating mode, version number, etc. It stands to reason that this file is already set up at the time of publication and does not need to be changed. DEVELOPMENT = False # If you change this variable then it will open development mode instead of release mode DEBUG = False # Whether this is in Debug mode mainly controls the settings in app.run(), which can be ignored if it is started from the command line HOST = \"127.0.0.1\" # Set the running IP PORT = 99 # run port FIRST_RUNNING = False # Is it the first time to run TAB_TOOLBOX_VERSION = \"1.0.0.1\" When development mode is on, the app.run() function in flask is used to run the program instead of WSGIServer . Debug mode can only be used if development mode is turned on, which makes the Debug parameter of app.run() True .","title":"Quickstart"},{"location":"quickstart/#getting-started-with-tab-toolbox-for-website","text":"","title":"Getting Started with Tab Toolbox for Website"},{"location":"quickstart/#install","text":"","title":"Install"},{"location":"quickstart/#clone-the-repository","text":"All roads lead to Rome, e.g. you can use Git. $ git clone git@github.com:wojiaoyishang/Tab-Toolbox-for-Website.git","title":"Clone the repository"},{"location":"quickstart/#install-python-envirnment","text":"After clone the repository, you should check Python Envirnment on your computer. This programme based on Python and please note that your Python version must be 3.8.0 and above . version 3.7.X not tested. The Python installation address can be downloaded from the Python official website, the link is here: https://www.python.org/downloads/release/python-380/","title":"Install Python Envirnment"},{"location":"quickstart/#install-python-module","text":"After confirming that the Python environment is correct, please confirm whether the modules supported in Python are installed. The modules necessary for Tab Toolbox for Website to run are in requirements.txt in the root directory of the repository. The content is as follows: bs4==0.0.1 Flask==2.1.3 gevent==20.6.2 MarkupSafe==2.1.1 pandas==1.4.3 psutil==5.7.2 requests==2.24.0 lxml==4.5.2 You can use pip to install, like this: $ pip install -r requirements.txt also you can try, $ python -m pip install -r requirements.txt","title":"Install Python Module"},{"location":"quickstart/#start-directly","text":"After you have ensured that Python and its modules are installed correctly, you can run the tests. Start main.py with Python. $ python main.py You can configure Tab Toolbox for Website simply by following the prompts output by the program. The configuration will then be written to config.py in the root directory of Tab Toolbox for Website. and will not ask for configuration again on next direct boot. The configuration guide is only in Chinese, and the following is the corresponding translation... Chinese: * \u563f\uff01\u4f60\u597d\uff01(\uffe3\u25bd\uffe3)\uff0f\u770b\u6765\u8fd9\u662f\u4f60\u7b2c\u4e00\u6b21\u6253\u5f00\u6b64\u7a0b\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u914d\u7f6e\u3002\u5f53\u7136\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u6765\u8fd0\u884c\u6b64\u7a0b\u5e8f\uff0c\u66f4\u591a\u4fe1\u606f\u8bf7\u67e5\u770b\u6211\u4eec\u7684\u6587\u6863\uff01 * \u603b\u4e4b\u6211\u4eec\u5148\u5f00\u59cb\u914d\u7f6e\u5427\uff01 * \u9996\u5148\uff0c\u6b64\u7a0b\u5e8f\u8fd0\u884c\u65f6\u7ed1\u5b9a\u7684IP\u5730\u5740 \u4e3a\uff08\u9ed8\u8ba4\u4e3a 127.0.0.1\uff0c\u4e0d\u7528\u62c5\u5fc3\u8f93\u9519\uff0c\u60a8\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6 config.py \u4e2d\u4fee\u6539\uff09 Enter: * Set HOST to 127.0.0.1 * \u5176\u6b21\uff0c\u8981\u7ed1\u5b9a\u90a3\u4e2a\u7aef\u53e3\u5462\uff1f\uff08\u9ed8\u8ba4\u4e3a 99 \uff09 Enter: * Set POST to 99 * OK\u4e86\uff01\u73b0\u5728\u6211\u4eec\u5c06\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5bf9\u4e8e\u8c03\u8bd5\u6a21\u5f0f\u4e0e\u53d1\u5e03\u6a21\u5f0f\u7684\u8bbe\u5b9a\u8bf7\u81ea\u884c\u4fee\u6539 config.py \u6587\u4ef6\uff01 English: * Hey! Hello! (\uffe3\u25bd\uffe3)\uff0f This is your first time running this software right? We need some configuration. Of course, you can also use the command line to run this program, check out our documentation for more info! * Anyway, let's start configuring it! * First, the IP address that this program is bound to when running is (the default is 127.0.0.1, don't worry about typing it wrong, you can modify it in the configuration file config.py) Enter: * Set HOST to 127.0.0.1 * Second, what port to bind to? (default is 99 ) Enter: * Set POST to 99 * OK! Now we will run the program, please modify the config.py file for the settings of debug mode and release mode!","title":"Start directly"},{"location":"quickstart/#start-commandly","text":"In addition, we also provide a way to start from the command line, pass in -h to view help. python main.py -h Usage: main.py [options] Options: -h, --help show this help message and exit -H host, --host=host Host for Running -p port, --port=port Port for Running -D, --development Development Mode -d, --debug Debug Mode The following is an example of startup: (1) Bind 0.0.0.0:8080, you can use Note: Please do not arbitrarily bind IP to 0.0.0.0, which may lead to the risk of public network access. $ python main.py -H 0.0.0.0 -p 8080 or you can, $ python main.py --host=0.0.0.0 --port=8080 (2) Turn on Development mode and Debug mode Note: For developer mode and Debug mode, IP address and port parameters must exist. $ python main.py --host=0.0.0.0 --port=8080 -D -d or $ python main.py --host=0.0.0.0 --port=8080 --development --debug It should be noted that the configuration file will be automatically rewritten when you start using the command line , even if you use the direct startup method next time, the configuration at the last command line startup will be directly used. About the configuration file, it will be explained below.","title":"Start commandly"},{"location":"quickstart/#visit-site","text":"Access the site according to the bound IP and port, if everything is normal, the following page will be displayed:","title":"Visit site"},{"location":"quickstart/#about-configuration-file","text":"The content of the configuration file config.py is as follows: # Note that this file is only used to configure some built-in content of the program, such as operating mode, version number, etc. It stands to reason that this file is already set up at the time of publication and does not need to be changed. DEVELOPMENT = False # If you change this variable then it will open development mode instead of release mode DEBUG = False # Whether this is in Debug mode mainly controls the settings in app.run(), which can be ignored if it is started from the command line HOST = \"127.0.0.1\" # Set the running IP PORT = 99 # run port FIRST_RUNNING = False # Is it the first time to run TAB_TOOLBOX_VERSION = \"1.0.0.1\" When development mode is on, the app.run() function in flask is used to run the program instead of WSGIServer . Debug mode can only be used if development mode is turned on, which makes the Debug parameter of app.run() True .","title":"About configuration file"},{"location":"thanks/","text":"Open Source & Thanks Thanks to the students and authors who provided all open source projects! layuimini Open Source License MIT License Copyright (c) 2019 layuimini Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Open Source & Thanks"},{"location":"thanks/#open-source-thanks","text":"Thanks to the students and authors who provided all open source projects!","title":"Open Source &amp; Thanks"},{"location":"thanks/#layuimini-open-source-license","text":"MIT License Copyright (c) 2019 layuimini Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"layuimini Open Source License"}]}